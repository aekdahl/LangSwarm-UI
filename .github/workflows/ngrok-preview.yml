name: Ngrok Preview Deployment

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to build from"
        required: true
        default: "main"
      backend:
        description: "URL for backend"
        required: true
        default: "https://langswarm-backend-128520073.europe-west1.run.app"

jobs:
  build-and-preview:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the specified branch
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set Environment Variables
        run: echo "REACT_APP_BACKEND_URL=${{ github.event.inputs.backend }}" >> $GITHUB_ENV

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Step 3: Ensure Dependencies Are Installed
      - name: Ensure Dependencies Are Installed
        run: |
          if ! npm list @vitejs/plugin-react > /dev/null 2>&1; then
            echo "Installing @vitejs/plugin-react..."
            npm install @vitejs/plugin-react --save-dev
          fi
          if ! npm list react-router-dom > /dev/null 2>&1; then
            echo "Installing react-router-dom..."
            npm install react-router-dom --save-dev
          fi
          if ! npm list styled-components > /dev/null 2>&1; then
            echo "Installing styled-components..."
            npm install styled-components --save-dev
          fi
          if ! npm list react-markdown > /dev/null 2>&1; then
            echo "Installing react-markdown..."
            npm install react-markdown --save-dev
          fi
          if ! npm list react-syntax-highlighter > /dev/null 2>&1; then
            echo "Installing react-syntax-highlighter..."
            npm install react-syntax-highlighter --save-dev
          fi
          if ! npm list remark-gfm > /dev/null 2>&1; then
            echo "Installing remark-gfm..."
            npm install remark-gfm --save-dev
          fi
          if [ ! -f package-lock.json ]; then
            echo "Running npm install to generate lock file..."
            npm install
          else
            echo "Using npm ci for dependency installation..."
            npm ci
          fi

      - name: Generate Config File
        run: |
          echo "Generating config.js file..."
          mkdir -p src
          cat <<EOF > src/config.js
          window._env_ = {
            REACT_APP_BACKEND_URL: "${{ github.event.inputs.backend }}"
          };
          EOF

      - name: Verify Files before build
        run: |
          echo "Build output structure:"
          ls -R .

      # Step 4: Build React App
      - name: Build React App
        run: npm run build || { echo "Build failed"; exit 1; }

      # Step 5: Start Local Server to Serve the React App
      - name: Start Local Server
        run: |
          npm install -g serve
          serve -s dist -l 5000 &
        env:
          NODE_ENV: production

      # Step 6: Install and Run Ngrok
      - name: Start Ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list >/dev/null
          sudo apt update && sudo apt install ngrok
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
          ngrok http 5000 > ngrok.log 2>&1 &
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
          REACT_APP_BACKEND_URL: ${{ github.event.inputs.backend }}

      # Step 7: Wait for Ngrok and Output Public URL
      - name: Wait for Ngrok
        run: |
          sleep 5
          curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url'

      - name: Verify Build Output
        run: |
          echo "Build output structure:"
          ls -R dist
          echo "Contents of dist/index.html:"
          cat dist/index.html
        
      # Step 8: Keep Workflow Running for 10 Minutes
      - name: Keep Workflow Running
        run: |
          echo "Workflow will stay active for 10 minutes for previewing..."
          sleep 600

      # Step 9: Output Ngrok Logs for Debugging (Optional)
      - name: Debug Logs
        run: cat ngrok.log
